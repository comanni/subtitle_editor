{"version":3,"sources":["SubtitleContext.js","components/video/VideoPlayer.js","components/subtitle/SubtitleCreate.js","layout/DataDisplayArea.js","components/FileSaveMenu.js","components/localstorage/LocalstorageCheck.js","App.js","index.js"],"names":["initialState","reducer","state","action","type","concat","subtitle","map","id","parseInt","korean","filter","Error","SubtitleStateContext","createContext","SubtitleDispatchContext","SubtitlePlayerContext","SubtitleProvider","children","useReducer","dispatch","player","useRef","Provider","value","useSubtitleState","context","useContext","useSubtitleDispatch","useSubtitlePlayer","VideoViewer","url","console","log","playerRef","videoId","opts","width","height","playerVars","autoplay","onReady","e","current","target","class","SubtitleCreate","fileAdd","setFileAdd","useState","fileData","setFileData","noFileMessage","setNoFileMessage","ref","button","Form","Field","Input","onChange","file","files","Button","disabled","onClick","undefined","reader","FileReader","onload","parseSRT","result","start","end","text","localStorage","setItem","JSON","stringify","readAsText","Message","negative","Header","MapRendering","data","subtitleData","useMemo","InputArea","setKorean","fluid","data-id","onBlur","event","id_key","parentNode","getAttribute","storageData","parse","getItem","Item","Content","Meta","data-starttime","seekTo","playVideo","Label","content","Extra","MapPlaceHolder","className","as","icon","Icon","name","Subheader","MapRenderingMemo","React","memo","prevProps","nextProps","updatedAt","SrtToMap","youtubeUrl","length","Group","divided","FileDownloadButton","color","startTime","endTime","startHour","startMin","startSec","startMill","String","endHour","endMin","endSec","endMill","TimeFormatChange","split","forEach","element","document","createElement","Blob","href","URL","createObjectURL","download","body","appendChild","click","FileSaveMenu","Grid","Row","column","Column","floated","style","textAlign","alert","LocalstorageCheckModal","open","setOpen","useEffect","Modal","basic","size","trigger","Actions","inverted","clear","i","App","setYoutubeUrl","youtubeUrlInput","placeholder","circular","link","firstElementChild","LocalstorageCheck","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d3c638c6.chunk.js","sourcesContent":["import { useReducer, createContext, useContext, useRef } from \"react\";\nconst initialState = []\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CREATE':\n      return state.concat(action.subtitle);\n    case 'UPDATE':\n      return state.map(subtitle => subtitle.id === parseInt(action.id)? ({...subtitle, korean: action.korean}) : subtitle)\n    case 'REMOVE':\n      return state.filter(subtitle => subtitle.id !== action.id);\n    case 'ERASE':\n        return state.filter(subtitle => subtitle.id === 0);\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n}\n\nconst SubtitleStateContext = createContext();\nconst SubtitleDispatchContext = createContext();\nconst SubtitlePlayerContext = createContext();\nexport function SubtitleProvider({ children }) {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const player = useRef();\n  \n    return (\n      <SubtitleStateContext.Provider value={state}>\n        <SubtitleDispatchContext.Provider value={dispatch}>\n          <SubtitlePlayerContext.Provider value={player}>\n          {children}\n          </SubtitlePlayerContext.Provider>\n            \n        </SubtitleDispatchContext.Provider>\n      </SubtitleStateContext.Provider>\n    );\n  }\n  \n  export function useSubtitleState() {\n    const context = useContext(SubtitleStateContext);\n    if (!context) {\n      throw new Error('Cannot find SubtitleProvider');\n    }\n    return context;\n  }\n  \n  export function useSubtitleDispatch() {\n    const context = useContext(SubtitleDispatchContext);\n    if (!context) {\n      throw new Error('Cannot find SubtitleProvider');\n    }\n    return context;\n  }\n  \n  export function useSubtitlePlayer() {\n    const context = useContext(SubtitlePlayerContext);\n    if (!context) {\n      throw new Error('Cannot find SubtitlePlayer');\n    }\n    return context;\n  }\n  \n","\nimport YouTube from \"react-youtube\";\nimport {useSubtitlePlayer} from \"../../SubtitleContext\"\nconst VideoViewer = ({url}) => {\n    console.log(\"viewer호출\")\n\n    const opts = {\n      width: \"640\",\n      height: \"390\",\n      playerVars: {\n        autoplay: 1,\n      },\n    };\n    const playerRef = useSubtitlePlayer();\n    const onReady = (e) => {\n\n      \n      playerRef.current = e.target\n      console.log(playerRef)\n    }\n\n    return (\n      url !== \"\" ? <YouTube videoId={url} opts={opts} onReady={onReady}/> : <div class='NullvideoArea'></div>\n    )\n  }\n\n  export default VideoViewer;","import { useRef, useState } from \"react\";\nimport {\n  Input,\n  Form,\n  Button,\n  Message,\n} from \"semantic-ui-react\";\nimport { useSubtitleDispatch } from \"../../SubtitleContext\";\nimport parseSRT from \"parse-srt\";\nimport React from 'react'\nconst SubtitleCreate = ( {fileAdd, setFileAdd} ) =>  {\n  const dispatch = useSubtitleDispatch();\n  const [fileData, setFileData] = useState();\n  const [noFileMessage, setNoFileMessage] = useState(false)\n  const ref = useRef();\n  const button = useRef();\n\n  function onSubmit() {\n    if(fileData !== undefined){\n      setNoFileMessage(false)\n    let reader = new FileReader();\n    reader.onload = function () {\n      parseSRT(reader.result).map((e) => {\n        dispatch({\n          type: \"CREATE\",\n          subtitle: {\n            id: e.id,\n            start: e.start,\n            end: e.end,\n            text: e.text,\n            korean: \"\",\n          }\n        })\n\n        localStorage.setItem(`subtitle_${e.id}`, JSON.stringify({\n          id: e.id,\n          start: e.start,\n          end: e.end,\n          text: e.text,\n          korean: \"\",\n        }))\n      }\n      );\n\n    };\n    reader.readAsText(fileData, \"euc-kr\");\n    setFileAdd(true)\n\n  } else {\n    setNoFileMessage(true)\n  }\n  }\n  const filechange = (e) => {\n    let file = e.target.files[0];\n    setFileData(file);\n\n  };\n\n  // console.log(useSubtitleState)\n\n  return (\n    <>\n    \n    <Form.Field>\n      <label>자막 파일</label>\n      <Input button>\n        <input type=\"file\" ref={ref} onChange={filechange}></input>\n        <Button ref={button} disabled={fileAdd} onClick={onSubmit}>{fileAdd? \"등록완료\" : \"자막 등록하기\"}</Button>\n      </Input>\n    </Form.Field>\n      {noFileMessage ?     <Message negative>\n    <Message.Header>파일이 선택되지 않았습니다.</Message.Header>\n  </Message> : \"\"}\n\n    </>\n  );\n}\n\nexport default SubtitleCreate;\n","import {useState, useMemo} from \"react\";\nimport {\n  Item,\n  Input,\n  Label,\n  Header,\n  Icon,\n} from \"semantic-ui-react\";\nimport { useSubtitleDispatch, useSubtitleState, useSubtitlePlayer } from \"../SubtitleContext\";\nimport React from 'react'\n\nconst MapRendering = ({ data, dispatch }) => {\n  const subtitleData = useMemo(() => data, [data])\n  const player = useSubtitlePlayer()\n  console.log(player.current)\n  const changeTime = (e) => {\n\n    if (player.current !== undefined){\n    player.current.seekTo(e.target.getAttribute('data-starttime'))\n    player.current.playVideo();\n    console.log(\"changeTime\")\n    }\n  }\n  const InputArea = ({ data }) => {\n    const [korean, setKorean] = useState(data.korean);\n\n    const onChange = (e) => {\n      setKorean(e.target.value)\n    }\n\n    const InputChange = (event) => {\n      // console.log(event.target.parentNode.getAttribute('data-id'));\n      let id_key = event.target.parentNode.getAttribute('data-id');\n      // console.log(event.target.value)\n      // let data = subtitle.find(e => e.id === parseInt(id))\n      dispatch({\n          type:\"UPDATE\",\n          id: id_key,\n          korean: event.target.value\n          \n      })\n      let storageData = JSON.parse(localStorage.getItem(`subtitle_${id_key}`))\n      storageData.korean = event.target.value\n      localStorage.setItem(`subtitle_${id_key}`, JSON.stringify(storageData))\n      // localStorage.setItem(`subtitle_${id_key}`, JSON.stringify(subtitleData.id_key))\n    } \n    return (\n      <Input fluid  data-id={data.id} >\n      <input type=\"text\" onBlur={InputChange} value={korean} onChange={onChange}></input>\n  </Input>\n    )\n  }\n\n    return (\n      <>\n        <Item>\n          <Item.Content>\n            <Item.Meta data-starttime={subtitleData.start} onClick={changeTime}>\n              <Label>{subtitleData.id}</Label> {subtitleData.start} ~ {subtitleData.end}\n            </Item.Meta>\n            <Item.Header content={subtitleData.text} />\n            <Item.Extra>\n              <InputArea data={data} ></InputArea>\n            </Item.Extra>\n          </Item.Content>\n        </Item>\n      </>\n    );\n  }\n\n\n  const MapPlaceHolder = () => {\n    return (\n      <div className=\"subtitle_default\">\n        <Header as=\"h2\" icon>\n          <Icon name=\"settings\" />\n          자막 파일 미선택\n          <Header.Subheader>자막 파일을 선택해주세요.</Header.Subheader>\n        </Header>\n      </div>\n    );\n  };\n  // const MapRenderingMemo = React.memo(MapRendering, (prevProps, nextProps) => {\n  //   console.log(prevProps)\n  //   if (prevProps.updatedAt === nextProps.updatedAt) {\n  //     return true;\n  //   }\n  //   console.log(prevProps)\n  //   return false;\n  // })\n  const MapRenderingMemo = React.memo(MapRendering, (prevProps, nextProps) => {\n\n    if (prevProps.updatedAt === nextProps.updatedAt) {\n      return true;\n    }\n\n    return false;\n  })\nconst SrtToMap = ({player, youtubeUrl}) => {\n\n  const subtitle = useSubtitleState();\n  const dispatch = useSubtitleDispatch();\n\n\n  return (\n    <div>\n      {subtitle.length === 0 ? <MapPlaceHolder></MapPlaceHolder> : \"\"}\n      <Item.Group divided>\n        {subtitle.map((e) => (\n          <MapRenderingMemo data={e} key={e.id} dispatch={dispatch} ></MapRenderingMemo>\n        ))}\n      </Item.Group>\n    </div>\n  );\n};\n\nexport default SrtToMap","import { useSubtitleDispatch, useSubtitleState } from \"../SubtitleContext\";\nimport { Button, Grid } from \"semantic-ui-react\";\nimport React from \"react\";\n\nfunction TimeFormatChange(startTime, endTime) {\n  let startHour = parseInt(startTime / 3600);\n  let startMin = parseInt((startTime % 3600) / 60);\n  let startSec = parseInt((startTime % 3600) % 60);\n  let startMill = parseInt((((startTime % 3600) % 60) - startSec) * 1000);\n\n  startHour = startHour < 10 ? \"0\" + startHour : String(startHour);\n  startMin = startMin < 10 ? \"0\" + startMin : String(startMin);\n  startSec = startSec < 10 ? \"0\" + startSec : String(startSec);\n  startMill =\n    startMill < 10\n      ? \"00\" + startMill\n      : startMill < 100\n      ? \"0\" + startMill\n      : String(startMill);\n\n  let endHour = parseInt(endTime / 3600);\n  let endMin = parseInt((endTime % 3600) / 60);\n  let endSec = parseInt((endTime % 3600) % 60);\n  let endMill = parseInt((((endTime % 3600) % 60) - endSec) * 1000);\n\n  endHour = endHour < 10 ? \"0\" + endHour : String(endHour);\n  endMin = endMin < 10 ? \"0\" + endMin : String(endMin);\n  endSec = endSec < 10 ? \"0\" + endSec : String(endSec);\n  endMill =\n    endMill < 10\n      ? \"00\" + endMill\n      : endMill < 100\n      ? \"0\" + endMill\n      : String(endMill);\n\n  let time = `${startHour}:${startMin}:${startSec},${startMill} --> ${endHour}:${endMin}:${endSec},${endMill}`;\n  return time;\n}\nconst FileDownloadButton = () => {\n  const subtitle = useSubtitleState();\n  let text = \"\";\n  const SrtDownload = () => {\n    subtitle.map((e) => {\n      text += `${e.id}\n${TimeFormatChange(e.start, e.end)}\\n`;\n\n      e.korean.split(\"<br />\").forEach((e) => (text += `${e}\\n`));\n      text += `\\n`;\n    });\n    const element = document.createElement(\"a\");\n    const file = new Blob([text], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"test.srt\";\n    document.body.appendChild(element);\n    element.click();\n  };\n  return (\n    <Button color=\"blue\" onClick={SrtDownload}>\n      최종 파일 출력하기\n    </Button>\n  );\n};\n\nconst FileSaveMenu = ({ setFileAdd }) => {\n  const dispatch = useSubtitleDispatch();\n  const sorry = () => {\n    alert(\"작업중인 기능입니다.\");\n  };\n  const deleteAll = () => {\n    dispatch({\n      type: \"ERASE\",\n    });\n    setFileAdd(false);\n  };\n  return (\n    <>\n      <Grid>\n        <Grid.Row column={5}>\n          <Grid.Column floated=\"left\" width=\"5\">\n            <Button onClick={deleteAll}>내용 지우기</Button>\n          </Grid.Column>\n\n          <Grid.Column\n            floated=\"right\"\n            width=\"10\"\n            style={{ textAlign: \"right\" }}\n          >\n            <Button onClick={sorry}>작업파일 다운로드</Button>\n            <FileDownloadButton></FileDownloadButton>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nexport default React.memo(FileSaveMenu);\n","import \"semantic-ui-css/semantic.min.css\";\n\nimport React, { useEffect } from 'react'\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react'\nimport { useSubtitleDispatch } from \"../../SubtitleContext\";\n\nfunction LocalstorageCheckModal({setFileAdd}) {\n  const [open, setOpen] = React.useState(false)\n  const dispatch = useSubtitleDispatch();\n\n\n  const onCancel = (e) => {\n      localStorage.clear();\n      setOpen(false)\n      \n  }\n\n\n  const onConfirm = (e) => {\n      let length = localStorage.length;\n      for (let i=1; i < length + 1; i++) {\n            let data = JSON.parse(localStorage.getItem(`subtitle_${i}`))\n            dispatch({\n              type: \"CREATE\",\n              subtitle: {\n                id: data.id,\n                start: data.start,\n                end: data.end,\n                text: data.text,\n                korean: data.korean,\n              }\n            })\n           \n      }\n      setOpen(false)\n      setFileAdd(true)\n  }\n\n  useEffect(() => {\n      let chk = localStorage.length\n      if (chk > 0) {\n          setOpen(true)\n      }\n  }, [])\n  return (\n    <Modal\n      basic\n      // onClose={() => setOpen(false)}\n      // onOpen={() => setOpen(true)}\n      open={open}\n      size='small'\n      trigger={<Button>Basic Modal</Button>}\n    >\n      <Header icon>\n        <Icon name='archive' />\n        기존에 등록되어있는 자막이 있습니다.\n      </Header>\n      <Modal.Content>\n        <p style={{textAlign:\"center\"}}>\n          기존에 작업하던 자막이 있습니다. 불러오시겠습니까?\n        </p>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button basic color='red' inverted onClick={onCancel}>\n          <Icon name='remove' /> 기존 작업 내용 삭제하기\n        </Button>\n        <Button color='green' inverted onClick={onConfirm}>\n          <Icon name='checkmark' /> 불러오기\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\nexport default LocalstorageCheckModal","\nimport \"./App.css\";\nimport { useRef, useState } from \"react\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport {\n  Input,\n  Form,\n  Header,\n  Icon,\n} from \"semantic-ui-react\";\nimport VideoViewer from \"./components/video/VideoPlayer\";\nimport {\n  SubtitleProvider,\n} from \"./SubtitleContext\";\nimport SubtitleCreate from \"./components/subtitle/SubtitleCreate\";\nimport SrtToMap from \"./layout/DataDisplayArea\";\nimport FileSaveMenu from \"./components/FileSaveMenu\";\nimport LocalstorageCheckModal from \"./components/localstorage/LocalstorageCheck\"\n\n\nfunction App() {\n\n  const [youtubeUrl, setYoutubeUrl] = useState(\"\");\n  const [fileAdd, setFileAdd] = useState(false)\n  const youtubeUrlInput = useRef();\n\n  const linkChange = (e) => {\n    setYoutubeUrl(e.target.parentNode.firstElementChild.value);\n  };\n\n  return (\n    <SubtitleProvider>\n      <div className=\"App\">\n        <div>\n          <VideoViewer url={youtubeUrl} ></VideoViewer>\n          <Header size=\"large\">동영상 및 자막 선택</Header>\n          <Form>\n            <Form.Field>\n              <label>유튜브 영상 주소</label>\n              <Input placeholder=\"youtube content ID를 입력하세요.\" icon>\n                <input ref={youtubeUrlInput} />\n                <Icon\n                  name=\"search\"\n                  circular=\"true\"\n                  link={true}\n                  onClick={linkChange}\n                ></Icon>\n              </Input>\n            </Form.Field>\n            \n            <SubtitleCreate fileAdd={fileAdd} setFileAdd={setFileAdd}></SubtitleCreate>\n          </Form>\n          <Header size=\"large\">파일 저장 및 출력</Header>\n          <FileSaveMenu setFileAdd={setFileAdd}></FileSaveMenu>\n          <Header>사용방법</Header>\n          <div>1. 작업하려는 유튜브 ID를 넣는다.(개인작업파일이라면 미등록으로 업로드 후 링크를 가져온다.)<br />\n          2. 자막 파일을 선택하여 추가 후 자막 등록하기를 누른다.(srt파일만 지원)<br />\n          3. 자막을 원하는 형태의 내용으로 변경한다.(ex. 영어 → 한국어)<br />\n          4. 최종파일 출력하기를 눌러 srt 파일을 다운로드받는다.<br />\n          cf. 자막 입력 시 브라우저에 자동으로 데이터를 저장합니다. 새로고침 시 지금까지 작업했던 내용을 불러올 수 있습니다.\n          </div>\n          <div className=\"ad\">ver. 2021.02.22.0001<br />For developer: <a href=\"https://coupa.ng/bR2xmd\">쿠팡</a> (링크를 통해 구매 시 제작자에게 수익이 발생함)</div>\n        </div>\n        <div className=\"subtitle_wrap\">\n          <SrtToMap youtubeUrl={youtubeUrl} />\n        </div>\n      </div>\n      <LocalstorageCheckModal setFileAdd={setFileAdd}></LocalstorageCheckModal>\n    </SubtitleProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}